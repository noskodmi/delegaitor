/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AiDecisionService } from "../aiDecision.service";
import { AiDecisionCreateInput } from "./AiDecisionCreateInput";
import { AiDecision } from "./AiDecision";
import { AiDecisionFindManyArgs } from "./AiDecisionFindManyArgs";
import { AiDecisionWhereUniqueInput } from "./AiDecisionWhereUniqueInput";
import { AiDecisionUpdateInput } from "./AiDecisionUpdateInput";

export class AiDecisionControllerBase {
  constructor(protected readonly service: AiDecisionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiDecision })
  async createAiDecision(
    @common.Body() data: AiDecisionCreateInput
  ): Promise<AiDecision> {
    return await this.service.createAiDecision({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AiDecision] })
  @ApiNestedQuery(AiDecisionFindManyArgs)
  async aiDecisions(@common.Req() request: Request): Promise<AiDecision[]> {
    const args = plainToClass(AiDecisionFindManyArgs, request.query);
    return this.service.aiDecisions({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aiDecision(
    @common.Param() params: AiDecisionWhereUniqueInput
  ): Promise<AiDecision | null> {
    const result = await this.service.aiDecision({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAiDecision(
    @common.Param() params: AiDecisionWhereUniqueInput,
    @common.Body() data: AiDecisionUpdateInput
  ): Promise<AiDecision | null> {
    try {
      return await this.service.updateAiDecision({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiDecision })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAiDecision(
    @common.Param() params: AiDecisionWhereUniqueInput
  ): Promise<AiDecision | null> {
    try {
      return await this.service.deleteAiDecision({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
