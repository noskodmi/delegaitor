/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AiDecision as PrismaAiDecision } from "@prisma/client";

export class AiDecisionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiDecisionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiDecision.count(args);
  }

  async aiDecisions(
    args: Prisma.AiDecisionFindManyArgs
  ): Promise<PrismaAiDecision[]> {
    return this.prisma.aiDecision.findMany(args);
  }
  async aiDecision(
    args: Prisma.AiDecisionFindUniqueArgs
  ): Promise<PrismaAiDecision | null> {
    return this.prisma.aiDecision.findUnique(args);
  }
  async createAiDecision(
    args: Prisma.AiDecisionCreateArgs
  ): Promise<PrismaAiDecision> {
    return this.prisma.aiDecision.create(args);
  }
  async updateAiDecision(
    args: Prisma.AiDecisionUpdateArgs
  ): Promise<PrismaAiDecision> {
    return this.prisma.aiDecision.update(args);
  }
  async deleteAiDecision(
    args: Prisma.AiDecisionDeleteArgs
  ): Promise<PrismaAiDecision> {
    return this.prisma.aiDecision.delete(args);
  }
}
