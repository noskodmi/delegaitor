/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HotWallet } from "./HotWallet";
import { HotWalletCountArgs } from "./HotWalletCountArgs";
import { HotWalletFindManyArgs } from "./HotWalletFindManyArgs";
import { HotWalletFindUniqueArgs } from "./HotWalletFindUniqueArgs";
import { DeleteHotWalletArgs } from "./DeleteHotWalletArgs";
import { HotWalletService } from "../hotWallet.service";
@graphql.Resolver(() => HotWallet)
export class HotWalletResolverBase {
  constructor(protected readonly service: HotWalletService) {}

  async _hotWalletsMeta(
    @graphql.Args() args: HotWalletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HotWallet])
  async hotWallets(
    @graphql.Args() args: HotWalletFindManyArgs
  ): Promise<HotWallet[]> {
    return this.service.hotWallets(args);
  }

  @graphql.Query(() => HotWallet, { nullable: true })
  async hotWallet(
    @graphql.Args() args: HotWalletFindUniqueArgs
  ): Promise<HotWallet | null> {
    const result = await this.service.hotWallet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HotWallet)
  async deleteHotWallet(
    @graphql.Args() args: DeleteHotWalletArgs
  ): Promise<HotWallet | null> {
    try {
      return await this.service.deleteHotWallet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
