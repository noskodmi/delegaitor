/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HotWalletService } from "../hotWallet.service";
import { HotWalletCreateInput } from "./HotWalletCreateInput";
import { HotWallet } from "./HotWallet";
import { HotWalletFindManyArgs } from "./HotWalletFindManyArgs";
import { HotWalletWhereUniqueInput } from "./HotWalletWhereUniqueInput";
import { HotWalletUpdateInput } from "./HotWalletUpdateInput";

export class HotWalletControllerBase {
  constructor(protected readonly service: HotWalletService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HotWallet })
  async createHotWallet(
    @common.Body() data: HotWalletCreateInput
  ): Promise<HotWallet> {
    return await this.service.createHotWallet({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HotWallet] })
  @ApiNestedQuery(HotWalletFindManyArgs)
  async hotWallets(@common.Req() request: Request): Promise<HotWallet[]> {
    const args = plainToClass(HotWalletFindManyArgs, request.query);
    return this.service.hotWallets({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HotWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hotWallet(
    @common.Param() params: HotWalletWhereUniqueInput
  ): Promise<HotWallet | null> {
    const result = await this.service.hotWallet({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HotWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHotWallet(
    @common.Param() params: HotWalletWhereUniqueInput,
    @common.Body() data: HotWalletUpdateInput
  ): Promise<HotWallet | null> {
    try {
      return await this.service.updateHotWallet({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HotWallet })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHotWallet(
    @common.Param() params: HotWalletWhereUniqueInput
  ): Promise<HotWallet | null> {
    try {
      return await this.service.deleteHotWallet({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
