/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, HotWallet as PrismaHotWallet } from "@prisma/client";

export class HotWalletServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HotWalletCountArgs, "select">
  ): Promise<number> {
    return this.prisma.hotWallet.count(args);
  }

  async hotWallets(
    args: Prisma.HotWalletFindManyArgs
  ): Promise<PrismaHotWallet[]> {
    return this.prisma.hotWallet.findMany(args);
  }
  async hotWallet(
    args: Prisma.HotWalletFindUniqueArgs
  ): Promise<PrismaHotWallet | null> {
    return this.prisma.hotWallet.findUnique(args);
  }
  async createHotWallet(
    args: Prisma.HotWalletCreateArgs
  ): Promise<PrismaHotWallet> {
    return this.prisma.hotWallet.create(args);
  }
  async updateHotWallet(
    args: Prisma.HotWalletUpdateArgs
  ): Promise<PrismaHotWallet> {
    return this.prisma.hotWallet.update(args);
  }
  async deleteHotWallet(
    args: Prisma.HotWalletDeleteArgs
  ): Promise<PrismaHotWallet> {
    return this.prisma.hotWallet.delete(args);
  }
}
