/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SurveyService } from "../survey.service";
import { SurveyCreateInput } from "./SurveyCreateInput";
import { Survey } from "./Survey";
import { SurveyFindManyArgs } from "./SurveyFindManyArgs";
import { SurveyWhereUniqueInput } from "./SurveyWhereUniqueInput";
import { SurveyUpdateInput } from "./SurveyUpdateInput";

export class SurveyControllerBase {
  constructor(protected readonly service: SurveyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Survey })
  async createSurvey(@common.Body() data: SurveyCreateInput): Promise<Survey> {
    return await this.service.createSurvey({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Survey] })
  @ApiNestedQuery(SurveyFindManyArgs)
  async surveys(@common.Req() request: Request): Promise<Survey[]> {
    const args = plainToClass(SurveyFindManyArgs, request.query);
    return this.service.surveys({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Survey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async survey(
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<Survey | null> {
    const result = await this.service.survey({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Survey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSurvey(
    @common.Param() params: SurveyWhereUniqueInput,
    @common.Body() data: SurveyUpdateInput
  ): Promise<Survey | null> {
    try {
      return await this.service.updateSurvey({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Survey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSurvey(
    @common.Param() params: SurveyWhereUniqueInput
  ): Promise<Survey | null> {
    try {
      return await this.service.deleteSurvey({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
